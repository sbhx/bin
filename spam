#!/usr/bin/env bash
#
# Scaled Package Manager bootstrap script

# oh bash, why isn't this the default?
set -e

# determine the location where pacman will store its bits
if [ -z "$SCALED_HOME" ]; then
    SCALED_HOME=$HOME/.scaled
    APPSUP="$HOME/Library/Application Support"
    [[ -d $APPSUP ]] && SCALED_HOME="$APPSUP/Scaled"
fi

declare PACMAN_ROOT=$SCALED_HOME/Packages/pacman
declare PACMAN_SPAM=$PACMAN_ROOT/bin/spam

# if the pacman package is installed and we're in some other spam script;
# delegate to the installed script as it is undoubtedly more up to date
declare THIS_SPAM
if [ -L "$0" ]; then
   THIS_SPAM=`readlink $0`
else
   THIS_SPAM=$0
fi
if [ -x "$PACMAN_SPAM" -a "$PACMAN_SPAM" != "$THIS_SPAM" ]; then
    echo "[Reexecing via '$PACMAN_SPAM']"
    echo "[You may wish to replace '$THIS_SPAM' with a symlink to the above.]"
    exec "$PACMAN_SPAM" "$@"
fi

# download mfetcher if needed
download() {
  local URL="$1"
  local FILE="$2"

  echo "[Downloading $URL...]"
  mkdir -p "${FILE%/*}" && {
      if hash curl 2>/dev/null; then
          curl -L -s -S -o "$FILE" $URL
      elif hash wget 2>/dev/null; then
          wget -nv -O "$FILE" $URL
      else
          echo "*** Error: 'curl' or 'wget' required to install dependencies."
          exit 255
      fi
  } && [[ -s "$FILE" ]]
}
declare M2REPO=$HOME/.m2/repository
declare MFETCHER=com/samskivert/mfetcher/1.0.3/mfetcher-1.0.3.jar
declare M2MFETCHER=$M2REPO/$MFETCHER
if [ ! -s $M2MFETCHER ]; then
    download "http://central.maven.org/maven2/$MFETCHER" "$M2MFETCHER"
fi

# check out pacman package if needed
declare PACMAN_GIT=https://github.com/scaled/pacman.git
if [ ! -d "$PACMAN_ROOT" ]; then
    if hash git 2>/dev/null; then
        echo "[Cloning $PACMAN_GIT...]"
        git clone -q "$PACMAN_GIT" "$PACMAN_ROOT" && [[ -d "$PACMAN_ROOT" ]]
    else
        echo "*** Error: 'git' required to install dependencies."
        exit 255
    fi
fi

# build pacman if needed
declare PACMAN_CLASSES=$PACMAN_ROOT/target/classes
declare PACMAN_JAR=$PACMAN_ROOT/target/module.jar
if [ ! -s "$PACMAN_JAR" ]; then
    # find javac
    declare JAVAC_CMD=javac
    [[ -e "$JAVA_HOME/bin/javac" ]] && JAVA_CMD="$JAVA_HOME/bin/javac"

    pushd "$PACMAN_ROOT" >/dev/null
    rm -rf target/classes
    mkdir -p target/classes
    find src/main/java -name '*.java' > target/pacman.sources
    echo "[Compiling Scaled package manager...]"
    $JAVAC_CMD -classpath "$M2MFETCHER" -d target/classes @target/pacman.sources
    cd target/classes
    jar -cf ../module.jar .
    popd >/dev/null
fi

addJvmArg () {
  JVMARGS=( "${JVMARGS[@]}" "$1" )
}
addArg () {
  ARGS=( "${ARGS[@]}" "$1" )
}

# process command line args
declare -a JVMARGS=("-classpath" "$PACMAN_JAR:$M2MFETCHER")
declare -a ARGS=("scaled.pacman.Pacman")
while [[ $# -gt 0 ]]; do
    case "$1" in
        -D*     ) addJvmArg "$1"           && shift ;;
        -J*     ) addJvmArg "${1:2}"       && shift ;;
        -d      ) addJvmArg "-Ddebug=true" && shift ;;
        -l|--log) LOG=$2                   && shift 2 ;;
        *       ) addArg "$1"              && shift ;;
    esac
done

# find java
declare JAVA_CMD=java
[[ -e "$JAVA_HOME/bin/java" ]] && JAVA_CMD="$JAVA_HOME/bin/java"

# bombs away!
if [ ! -z "$LOG" ]; then
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}" >$LOG 2>&1 &
else
    exec $JAVA_CMD "${JVMARGS[@]}" "${ARGS[@]}"
fi
